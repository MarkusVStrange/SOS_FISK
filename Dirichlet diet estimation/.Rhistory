cohort.j <- year.i-floor(herring.age[j])
size <- vbgrHerring(jday-herring_hatch+(j-1),cohort.j)*10
sd<- vbgr.sdHerring(jday-herring_hatch+(j-1),cohort.j,100000)*10
sd[sd<0] <- 0
available.herring[,j] <- herring.i[j]*dnorm(her.lengths,size,sd)/sum(dnorm(her.lengths,size,sd))
}
herring.av <-  data.frame(l=her.lengths/10,N=rowSums(available.herring))
herring.coef <- LW %>% filter(species=="herring")
herring.av$B <- herring.av$N*(herring.coef$a*herring.av$l^herring.coef$b) # g
herring.av$avB <- pmax(0,corm_herring.pref(herring.av$l*10))*herring.av$B
####
# flatfish
####
fl.i <- Flatfish %>% filter(year==year.i & yday==round(jday*365))
fl.i$Age[fl.i$Age>=10] <- 10+jday
flatfish.i <- aggregate(N~Age+species,data=fl.i,FUN=sum)
Fl <- flatfish.i %>% filter(species=="flounder")
Pl <- flatfish.i %>% filter(species=="plaice")
Da <- flatfish.i %>% filter(species=="dab")
available.flounder <- matrix(NA,ncol=length(flatfish.age),nrow = length(flat.lengths))
available.plaice <- matrix(NA,ncol=length(flatfish.age),nrow = length(flat.lengths))
available.dab <- matrix(NA,ncol=length(flatfish.age),nrow = length(flat.lengths))
for(j in 1:length(flatfish.age)){
cohort.j <- year.i-floor(flatfish.age[j])
size <- c(vbgrFlounder(jday-Flounder_hatch+(j-1),cohort.j)*10,vbgrPlaice(jday-Plaice_hatch+(j-1),cohort.j)*10,
vbgrDab(jday-Dab_hatch+(j-1),cohort.j)*10)
sd <- c(vbgr.sdFlounder(jday-Flounder_hatch+(j-1),cohort.j,100000)*10,vbgr.sdPlaice(jday-Plaice_hatch+(j-1),cohort.j,100000)*10,
vbgr.sdDab(jday-Dab_hatch+(j-1),cohort.j,100000)*10)
available.flounder[,j] <- Fl$N[j]*dnorm(flat.lengths,size[1],sd[1])/sum(dnorm(flat.lengths,size[1],sd[1]))
available.plaice[,j] <- Pl$N[j]*dnorm(flat.lengths,size[2],sd[2])/sum(dnorm(flat.lengths,size[2],sd[2]))
available.dab[,j] <- Da$N[j]*dnorm(flat.lengths,size[3],sd[3])/sum(dnorm(flat.lengths,size[3],sd[3]))
}
flounder.av <-  data.frame(l=flat.lengths/10,N=rowSums(available.flounder))
flounder.coef <- LW %>% filter(species=="flounder" & year==year.i)
if(length(flounder.coef$year)==0){
flounder.coef <- LW %>% filter(species=="flounder" & year==1992)
}
flounder.av$B <- flounder.av$N*(flounder.coef$a*flounder.av$l^flounder.coef$b) # g
flounder.av$avB <- pmax(0,corm_flatfish.pref(flounder.av$l*10))*flounder.av$B
plaice.av <-  data.frame(l=flat.lengths/10,N=rowSums(available.plaice))
plaice.coef <- LW %>% filter(species=="plaice" & year==year.i)
if(length(plaice.coef$year)==0){
plaice.coef <- LW %>% filter(species=="plaice" & year==1994)
}
plaice.av$B <- plaice.av$N*(plaice.coef$a*plaice.av$l^plaice.coef$b) # g
plaice.av$avB <- pmax(0,corm_flatfish.pref(plaice.av$l*10))*plaice.av$B
dab.av <-  data.frame(l=flat.lengths/10,N=rowSums(available.dab))
dab.coef <- LW %>% filter(species=="dab" & year==year.i)
if(length(dab.coef$year)==0){
dab.coef <- LW %>% filter(species=="dab" & year==1994)
}
dab.av$B <- dab.av$N*(dab.coef$a*dab.av$l^dab.coef$b) # g
dab.av$avB <- pmax(0,corm_flatfish.pref(dab.av$l*10))*dab.av$B
# combine food
cormFood$sampling[((i-1)*n_prey+1):(i*n_prey)] <- samplings[i]
cormFood$species[((i-1)*n_prey+1):(i*n_prey)] <- prey
cormFood$B_index[(i-1)*n_prey+1] <- sum(cod.av$avB)
cormFood$B_index[(i-1)*n_prey+2] <- sum(herring.av$avB)
cormFood$B_index[(i-1)*n_prey+3] <- sum(flounder.av$avB)
cormFood$B_index[(i-1)*n_prey+4] <- sum(plaice.av$avB)
cormFood$B_index[(i-1)*n_prey+5] <- sum(dab.av$avB)
print(i)
}
View(cormFood)
write.table(cormFood,paste(data_wd,"cormorantFood_samplings.csv",sep=""),row.names = FALSE,sep=';')
# Load preference functions
load("preference functions/seal_cod_pref.RData")
load("preference functions/seal_herring_pref.RData")
load("preference functions/seal_flatfish_pref.RData")
load("preference functions/corm_cod_pref.RData")
load("preference functions/corm_herring_pref.RData")
load("preference functions/corm_flatfish_pref.RData")
data_wd <- paste(dirname(dirname(getwd())),"/SOS data/",sep="")
coefs <- readRDS(paste(data_wd,"coefficients.R",sep=""))
# Define cod functions and read data
#####
# Growth model, cohort spread by length, and individuals at by age and time, functions: vbgr.fixed(), vbgr.sd(), N_age
vbgrCod <- function(age,cohort){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 with fixed hatching time
# define growth parameters
Linf <- coefs$cod_varying_growth$Linf[coefs$cod_varying_growth$cohort %in% cohort] # cm. McQueen et al., 2019
L_hatch <- coefs$L_hatch_cod # length at hatching, cm (Pepin et al, 1997)
k <- coefs$cod_varying_growth$k[coefs$cod_varying_growth$cohort %in% cohort] # vbgr growth rate, from McQueen
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_cod # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
L_t <- (L_hatch-Linf)*exp(-k*(phi_t+age-phi_hatch))+Linf # vbgr estimated length
return(L_t)
}
vbgr.sdCod <- function(age,cohort,n){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 and estimated
# t in fraction year, Julian day/365
Linf <- rnorm(n,mean=coefs$cod_varying_growth$Linf[coefs$cod_varying_growth$cohort %in% cohort],
sd=coefs$cod_varying_sd$Linf_sd[coefs$cod_varying_sd$cohort==cohort]) # Assymptotic length - with stochasticity
L_hatch <- coefs$L_hatch_cod # length at hatching, cm (Pepin et al, 1997)
k <- rnorm(n,mean=coefs$cod_varying_growth$k[coefs$cod_varying_growth$cohort %in% cohort],
sd=coefs$cod_varying_sd$k_sd[coefs$cod_varying_sd$cohort==cohort])# vbgr growth rate
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_cod # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
sd <- rep(0,length(t))
for (i in 1:length(sd)){
fish.age <- age[i]+rnorm(n,mean=0,
sd=coefs$cod_varying_sd$A_sd[coefs$cod_varying_sd$cohort==cohort]) # time of hatching with stochasticity, Julian day / 365 - mean = march 1st
L_t <- (L_hatch-Linf)*exp(-k*(phi_t[i]+fish.age-phi_hatch))+Linf # vbgr estimated length
sd[i] <- sd(L_t)
}
return(sd)
}
N_ageCod <- function(dat,age,yrs){ # Number of individuals by age
dat$Z <- dat$M_var+dat$Fest
Ns <- matrix(rep(0,(length(age)+1)*length(yrs)*365),ncol = length(age)+1)
Ns[,length(age)+1] <- rep(yrs,each=365)
x <- seq(1/365,1,length=365)
for(i in 1:length(yrs)){
for(j in 1:length(age)){
di <- dat %>% filter(ages==age[j] & years==yrs[i])
dip1 <- dat %>% filter(ages==(age[j]+1) & years==(yrs[i]+1))
Ns[(365*(i-1)+1):(365*i),j] <- di$N*exp(-x*di$Z)
}
}
return(Ns)
}
Cod <- read.table(paste(data_wd,'M_sms.csv',sep=""),sep=';',header=TRUE)
#Cod$N <- readRDS('data/sms_mortality.RDS')$N$N
cormorant <- read.table(paste(data_wd,'corm_diet.csv',sep=""),sep=';',header=TRUE)
gseal <- read.table(paste(data_wd,'gSeal_diet.csv',sep=""),sep=';',header=TRUE)
gseal <- gseal %>% filter(Site!="Utklippan")
#####
# Define herring functions and read data
#####
vbgrHerring <- function(age,cohort){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 with fixed hatching time
# define growth parameters
Linf <- coefs$herring_varying_growth$Linf[coefs$herring_varying_growth$cohort %in% cohort] # cm. McQueen et al., 2019
L_hatch <- coefs$L_hatch_herring # length at hatching, cm (Pepin et al, 1997)
k <- coefs$herring_varying_growth$k[coefs$herring_varying_growth$cohort %in% cohort] # vbgr growth rate, from McQueen
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_herring # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
L_t <- (L_hatch-Linf)*exp(-k*(phi_t+age-phi_hatch))+Linf # vbgr estimated length
return(L_t)
}
vbgr.sdHerring <- function(age,cohort,n){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 and estimated
# t in fraction year, Julian day/365
Linf <- rnorm(n,mean=coefs$herring_varying_growth$Linf[coefs$herring_varying_growth$cohort %in% cohort],
sd=coefs$herring_varying_sd$Linf_sd[coefs$herring_varying_sd$cohort==cohort]) # Assymptotic length - with stochasticity
L_hatch <- coefs$L_hatch_herring # length at hatching, cm (Pepin et al, 1997)
k <- rnorm(n,mean=coefs$herring_varying_growth$k[coefs$herring_varying_growth$cohort %in% cohort],
sd=coefs$herring_varying_sd$k_sd[coefs$herring_varying_sd$cohort==cohort])# vbgr growth rate
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_herring # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
sd <- rep(0,length(t))
for (i in 1:length(sd)){
fish.age <- age[i]+rnorm(n,mean=0,
sd=coefs$herring_varying_sd$A_sd[coefs$herring_varying_sd$cohort==cohort]) # time of hatching with stochasticity, Julian day / 365 - mean = march 1st
L_t <- (L_hatch-Linf)*exp(-k*(phi_t[i]+fish.age-phi_hatch))+Linf # vbgr estimated length
sd[i] <- sd(L_t)
}
return(sd)
}
N_ageHerring <- function(dat,age,yrs){ # Number of individuals by age - Model N is from the start of the year
Ns <- matrix(rep(0,(length(age)+1)*length(yrs)*365),ncol = length(age)+1)
Ns[,length(age)+1] <- rep(yrs,each=365)
x <- seq(1/365,1,length=365)
for(i in 1:length(yrs)){
for(j in 1:length(age)){
di <- Herring %>% filter(ages==age[j] & years==yrs[i])
dip1 <- Herring %>% filter(ages==(age[j]+1) & years==(yrs[i]+1))
Ns[(365*(i-1)+1):(365*i),j] <- di$N*exp(-x*di$Z)
}
}
return(Ns)
}
Herring <- read.table(paste(data_wd,'Herring.csv',sep=""),sep=';',header=TRUE)
#####
# Define Flatfish functions and read data
#####
# define flounder growth function
vbgrFlounder <- function(age,cohort){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 with fixed hatching time
# define growth parameters
Linf <- coefs$flounder_varying_growth$Linf[coefs$flounder_varying_growth$cohort %in% cohort] # cm. McQueen et al., 2019
L_hatch <- coefs$L_hatch_flounder # length at hatching, cm (Pepin et al, 1997)
k <- coefs$flounder_varying_growth$k[coefs$flounder_varying_growth$cohort %in% cohort] # vbgr growth rate, from McQueen
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_flounder # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
L_t <- (L_hatch-Linf)*exp(-k*(phi_t+age-phi_hatch))+Linf # vbgr estimated length
return(L_t)
}
vbgr.sdFlounder <- function(age,cohort,n){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 and estimated
# t in fraction year, Julian day/365
Linf <- rnorm(n,mean=coefs$flounder_varying_growth$Linf[coefs$flounder_varying_growth$cohort %in% cohort],
sd=coefs$flounder_varying_sd$Linf_sd[coefs$flounder_varying_sd$cohort==cohort]) # Assymptotic length - with stochasticity
L_hatch <- coefs$L_hatch_flounder # length at hatching, cm (Pepin et al, 1997)
k <- rnorm(n,mean=coefs$flounder_varying_growth$k[coefs$flounder_varying_growth$cohort %in% cohort],
sd=coefs$flounder_varying_sd$k_sd[coefs$flounder_varying_sd$cohort==cohort])# vbgr growth rate
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_flounder # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
sd <- rep(0,length(t))
for (i in 1:length(sd)){
fish.age <- age[i]+rnorm(n,mean=0,
sd=coefs$flounder_varying_sd$A_sd[coefs$flounder_varying_sd$cohort==cohort]) # time of hatching with stochasticity, Julian day / 365 - mean = march 1st
L_t <- (L_hatch-Linf)*exp(-k*(phi_t[i]+fish.age-phi_hatch))+Linf # vbgr estimated length
sd[i] <- sd(L_t)
}
return(sd)
}
# define plaice growth function
vbgrPlaice <- function(age,cohort){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 with fixed hatching time
# define growth parameters
Linf <- coefs$plaice_varying_growth$Linf[coefs$plaice_varying_growth$cohort %in% cohort] # cm. McQueen et al., 2019
L_hatch <- coefs$L_hatch_plaice # length at hatching, cm (Pepin et al, 1997)
k <- coefs$plaice_varying_growth$k[coefs$plaice_varying_growth$cohort %in% cohort] # vbgr growth rate, from McQueen
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_plaice # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
L_t <- (L_hatch-Linf)*exp(-k*(phi_t+age-phi_hatch))+Linf # vbgr estimated length
return(L_t)
}
vbgr.sdPlaice <- function(age,cohort,n){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 and estimated
# t in fraction year, Julian day/365
Linf <- rnorm(n,mean=coefs$plaice_varying_growth$Linf[coefs$plaice_varying_growth$cohort %in% cohort],
sd=coefs$plaice_varying_sd$Linf_sd[coefs$plaice_varying_sd$cohort==cohort]) # Assymptotic length - with stochasticity
L_hatch <- coefs$L_hatch_plaice # length at hatching, cm (Pepin et al, 1997)
k <- rnorm(n,mean=coefs$plaice_varying_growth$k[coefs$plaice_varying_growth$cohort %in% cohort],
sd=coefs$plaice_varying_sd$k_sd[coefs$plaice_varying_sd$cohort==cohort])# vbgr growth rate
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_plaice # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
sd <- rep(0,length(t))
for (i in 1:length(sd)){
fish.age <- age[i]+rnorm(n,mean=0,
sd=coefs$plaice_varying_sd$A_sd[coefs$plaice_varying_sd$cohort==cohort]) # time of hatching with stochasticity, Julian day / 365 - mean = march 1st
L_t <- (L_hatch-Linf)*exp(-k*(phi_t[i]+fish.age-phi_hatch))+Linf # vbgr estimated length
sd[i] <- sd(L_t)
}
return(sd)
}
# define dab growth function
vbgrDab <- function(age,cohort){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 with fixed hatching time
# define growth parameters
Linf <- coefs$dab_varying_growth$Linf[coefs$dab_varying_growth$cohort %in% cohort] # cm. McQueen et al., 2019
L_hatch <- coefs$L_hatch_dab # length at hatching, cm (Pepin et al, 1997)
k <- coefs$dab_varying_growth$k[coefs$dab_varying_growth$cohort %in% cohort] # vbgr growth rate, from McQueen
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_dab # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
L_t <- (L_hatch-Linf)*exp(-k*(phi_t+age-phi_hatch))+Linf # vbgr estimated length
return(L_t)
}
vbgr.sdDab <- function(age,cohort,n){ # von Bertalanffy growth rate. Parameters from McQueen et al., 2019 and estimated
# t in fraction year, Julian day/365
Linf <- rnorm(n,mean=coefs$dab_varying_growth$Linf[coefs$dab_varying_growth$cohort %in% cohort],
sd=coefs$dab_varying_sd$Linf_sd[coefs$dab_varying_sd$cohort==cohort]) # Assymptotic length - with stochasticity
L_hatch <- coefs$L_hatch_dab # length at hatching, cm (Pepin et al, 1997)
k <- rnorm(n,mean=coefs$dab_varying_growth$k[coefs$dab_varying_growth$cohort %in% cohort],
sd=coefs$dab_varying_sd$k_sd[coefs$dab_varying_sd$cohort==cohort])# vbgr growth rate
u <- coefs$u # Amplitude of seasonality
w <- coefs$w # Timing of peak growth
t_hatch <- coefs$t_hatch_dab # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
t <- age+t_hatch
X_t <- t-floor(t) # time of year [0,1]
phi_t <- u*sin(2*pi*(X_t-w))/(2*pi) # seasonal variability in growth
phi_hatch <- u*sin(2*pi*(t_hatch-w))/(2*pi) # seasonal variability in growth
sd <- rep(0,length(t))
for (i in 1:length(sd)){
fish.age <- age[i]+rnorm(n,mean=0,
sd=coefs$dab_varying_sd$A_sd[coefs$dab_varying_sd$cohort==cohort]) # time of hatching with stochasticity, Julian day / 365 - mean = march 1st
L_t <- (L_hatch-Linf)*exp(-k*(phi_t[i]+fish.age-phi_hatch))+Linf # vbgr estimated length
sd[i] <- sd(L_t)
}
return(sd)
}
Flatfish <- read.table(paste(data_wd,"N_est.flatfish.csv",sep=""),sep=';',header=TRUE)
Flatfish$yday <- round(Flatfish$jd*365)
names(Flatfish)[names(Flatfish)=="Species"] <- "species"
#####
LW <- read.table(paste(data_wd,"length-weight.csv",sep=""),header=TRUE,sep=';')
month <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug",
"Sep","Oct","Nov","Dec")
width <- 10
cod.lengths <- seq(width/2,1500+width/2,by=width)
her.lengths <- seq(width/2,500+width/2,by=width)
flat.lengths <- seq(width/2,700+width/2,by=width)
herring.age <- 0:8
flatfish.age <- 0:10
cod.age <- 0:7
cod_hatch <- coefs$t_hatch_cod # time of hatching, Julian day / 365 - spawning from Jan. to July (a bit arbitrary from H端ssy et al., 2011), average set to peak spawning
herring_hatch <- coefs$t_hatch_herring
Flounder_hatch <-coefs$t_hatch_flounder # time of hatching, Julian day / 365 - from fiskeatlas
Plaice_hatch <- coefs$t_hatch_plaice # time of hatching, Julian day / 365 - from fiskeatlas
Dab_hatch <- coefs$t_hatch_dab # time of hatching, Julian day / 365 - from fiskeatlas
# seal food index - month
#####
months <- c(Jan=1,Feb=2,Mar=3,Apr=4,May=5,Jun=6,Jul=7,Aug=8,Sep=9,Oct=10,Nov=11,Dec=12)
prey <- c("cod","herring","flounder","plaice","dab")
samplings <- unique(paste(gseal$Year,gseal$Month))
n_samplings <- length(samplings)
n_prey <- length(prey)
sealFood <- data.frame(sampling=rep("O",n_samplings*n_prey),
B_index=rep(0,n_samplings*n_prey),
species=rep("O",n_samplings*n_prey))
samplings
for (i in 1:length(samplings)){
# sampling specific
jday <- yday(as.Date(paste(substr(samplings[i],1,4),
months[substr(samplings[i],6,8)],16,sep='-')))/365
year.i <- as.numeric(substr(samplings[i],1,4))
# cod
####
cod.i <- N_ageCod(Cod,cod.age,year.i)[jday*365,1:length(cod.age)]
available.cod <- matrix(NA,ncol=length(cod.age),nrow = length(cod.lengths))
for(j in 1:length(cod.age)){
cohort.j <- year.i-floor(cod.age[j])
size <- vbgrCod(jday-cod_hatch+(j-1),cohort.j)*10
sd<- vbgr.sdCod(jday-cod_hatch+(j-1),cohort.j,100000)*10
sd[sd<0] <- 0
available.cod[,j] <- cod.i[j]*dnorm(cod.lengths,size,sd)/sum(dnorm(cod.lengths,size,sd))
}
avail <- data.frame(l.class=cod.lengths,available=rowSums(available.cod))
available.cod[available.cod<0] <- rep(width/2,length(available.cod[available.cod<0]))
cod.av <-  data.frame(l=cod.lengths/10,N=rowSums(available.cod))
cod.coef <- LW %>% filter(species=="cod" & year==year.i)
if(length(cod.coef$year)==0){
cod.coef <- LW %>% filter(species=="cod" & year==min(year))
}
cod.av$B <- cod.av$N*(cod.coef$a*cod.av$l^cod.coef$b) # g
cod.av$avB <- pmax(0,seal_cod.pref(cod.av$l*10))*cod.av$B
####
# herring
####
herring.i <- N_ageHerring(herring,herring.age,year.i)[jday*365,1:length(herring.age)]
available.herring <- matrix(NA,ncol=length(herring.age),nrow = length(her.lengths))
for(j in 1:length(herring.age)){
cohort.j <- year.i-floor(herring.age[j])
size <- vbgrHerring(jday-herring_hatch+(j-1),cohort.j)*10
sd<- vbgr.sdHerring(jday-herring_hatch+(j-1),cohort.j,100000)*10
sd[sd<0] <- 0
available.herring[,j] <- herring.i[j]*dnorm(her.lengths,size,sd)/sum(dnorm(her.lengths,size,sd))
}
herring.av <-  data.frame(l=her.lengths/10,N=rowSums(available.herring))
herring.coef <- LW %>% filter(species=="herring")
herring.av$B <- herring.av$N*(herring.coef$a*herring.av$l^herring.coef$b) # g
herring.av$avB <- pmax(0,seal_herring.pref(herring.av$l*10))*herring.av$B
####
# flatfish
####
fl.i <- Flatfish %>% filter(year==year.i & yday==round(jday*365))
fl.i$Age[fl.i$Age>=10] <- 10+jday
flatfish.i <- aggregate(N~Age+species,data=fl.i,FUN=sum)
Fl <- flatfish.i %>% filter(species=="flounder")
Pl <- flatfish.i %>% filter(species=="plaice")
Da <- flatfish.i %>% filter(species=="dab")
available.flounder <- matrix(NA,ncol=length(flatfish.age),nrow = length(flat.lengths))
available.plaice <- matrix(NA,ncol=length(flatfish.age),nrow = length(flat.lengths))
available.dab <- matrix(NA,ncol=length(flatfish.age),nrow = length(flat.lengths))
for(j in 1:length(flatfish.age)){
cohort.j <- year.i-floor(flatfish.age[j])
size <- c(vbgrFlounder(jday-Flounder_hatch+(j-1),cohort.j)*10,vbgrPlaice(jday-Plaice_hatch+(j-1),cohort.j)*10,
vbgrDab(jday-Dab_hatch+(j-1),cohort.j)*10)
sd <- c(vbgr.sdFlounder(jday-Flounder_hatch+(j-1),cohort.j,100000)*10,vbgr.sdPlaice(jday-Plaice_hatch+(j-1),cohort.j,100000)*10,
vbgr.sdDab(jday-Dab_hatch+(j-1),cohort.j,100000)*10)
available.flounder[,j] <- Fl$N[j]*dnorm(flat.lengths,size[1],sd[1])/sum(dnorm(flat.lengths,size[1],sd[1]))
available.plaice[,j] <- Pl$N[j]*dnorm(flat.lengths,size[2],sd[2])/sum(dnorm(flat.lengths,size[2],sd[2]))
available.dab[,j] <- Da$N[j]*dnorm(flat.lengths,size[3],sd[3])/sum(dnorm(flat.lengths,size[3],sd[3]))
}
flounder.av <-  data.frame(l=flat.lengths/10,N=rowSums(available.flounder))
flounder.coef <- LW %>% filter(species=="flounder" & year==year.i)
if(length(flounder.coef$year)==0){
flounder.coef <- LW %>% filter(species=="flounder" & year==1992)
}
flounder.av$B <- flounder.av$N*(flounder.coef$a*flounder.av$l^flounder.coef$b) # g
flounder.av$avB <- pmax(0,seal_flatfish.pref(flounder.av$l*10))*flounder.av$B
plaice.av <-  data.frame(l=flat.lengths/10,N=rowSums(available.plaice))
plaice.coef <- LW %>% filter(species=="plaice" & year==year.i)
if(length(plaice.coef$year)==0){
plaice.coef <- LW %>% filter(species=="plaice" & year==1994)
}
plaice.av$B <- plaice.av$N*(plaice.coef$a*plaice.av$l^plaice.coef$b) # g
plaice.av$avB <- pmax(0,seal_flatfish.pref(plaice.av$l*10))*plaice.av$B
dab.av <-  data.frame(l=flat.lengths/10,N=rowSums(available.dab))
dab.coef <- LW %>% filter(species=="dab" & year==year.i)
if(length(dab.coef$year)==0){
dab.coef <- LW %>% filter(species=="dab" & year==1994)
}
dab.av$B <- dab.av$N*(dab.coef$a*dab.av$l^dab.coef$b) # g
dab.av$avB <- pmax(0,seal_flatfish.pref(dab.av$l*10))*dab.av$B
# combine food
sealFood$sampling[((i-1)*n_prey+1):(i*n_prey)] <- samplings[i]
sealFood$species[((i-1)*n_prey+1):(i*n_prey)] <- prey
sealFood$B_index[(i-1)*n_prey+1] <- sum(cod.av$avB)
sealFood$B_index[(i-1)*n_prey+2] <- sum(herring.av$avB)
sealFood$B_index[(i-1)*n_prey+3] <- sum(flounder.av$avB)
sealFood$B_index[(i-1)*n_prey+4] <- sum(plaice.av$avB)
sealFood$B_index[(i-1)*n_prey+5] <- sum(dab.av$avB)
print(i)
}
write.table(sealFood,paste(data_wd,"sealFood_samplings.csv",sep=""),row.names = FALSE,sep=';')
data_wd <- paste(dirname(dirname(getwd())),"/SOS data/",sep="") # data working directory
# Prepare seal data - month
#####
seal.diet <- read.table(paste(data_wd,"gSeal_diet_prop.csv",sep=""),header=TRUE,sep=';')
seal.diet <- seal.diet %>% filter(Site!="Utklippan")
names(seal.diet)[names(seal.diet) %in% c("Year","Month","Species")] <- c("year","month","species")
prey <- c("cod","flatfish")
seal.diet$species[!(seal.diet$species %in% prey)] <- "other"
sdn1 <- aggregate(n~ymp+month+year,data=seal.diet,FUN = mean)
sd <- aggregate(FW.cor~month+year+species,data=seal.diet,FUN = sum)
sd <- left_join(sd,aggregate(n~month+year,data=sdn1,FUN = sum))
sd$ym <- paste(sd$year,sd$month)
full.diet <- as.character((as.data.frame(table(sd$ym)) %>% filter(Freq==3))$Var1)
sd <- sd %>% filter(ym %in% full.diet)
sealFood <- read.table(paste(data_wd,"sealFood_samplings.csv",sep=""),header=TRUE,sep=';')
sealFood <- sealFood %>% filter(species!="herring")
sealFood$species[!(sealFood$species %in% prey)] <- "flatfish"
sealFood$year <- as.numeric(substr(sealFood$sampling,1,4))
sealFood$month <- substr(sealFood$sampling,6,8)
sf <- aggregate(B_index~month+year+species,data=sealFood,FUN = sum)
sf$sampling <- paste(sf$year,sf$month)
sf <- sf %>% filter(sampling %in% sd$ym)
#meanS.B <- aggregate(biomass~species,data=sf,FUN=mean)$biomass
meanS.B <- c(12270972.32,20092.71) # means from the food time series in "prepareDirichletDiet"
S.idx <- match(sf$species,prey)
sf$Bnorm <- (sf$B_index)/meanS.B[S.idx]
rm(list=setdiff(ls(),c('sd','sf','data_wd')))
names(sd)[names(sd)=="FW.cor"] <- "B"
#####
# seal configuration
par <- list(logK=c(0,0,0))
dat <- list(diet=sd,food=sf)
# run diet model
#####
f <- function(par){
getAll(par,dat)
k <- exp(logK)
#r <- exp(logR)
prey <- unique(diet$species)
ddirichlet <- function(x, alpha, log = TRUE) {
logB <- sum(lgamma(alpha)) - lgamma(sum(alpha))
ret <- sum((alpha - 1) * log(x)) - logB
if(log){
ret
} else {
exp(ret)
}
}
samplings <- unique(diet$ym)
p_cod <- rep(0,length(samplings))
p_flat <- rep(0,length(samplings))
p_other <- rep(0,length(samplings))
ret <- 0
for(i in 1:length(samplings)){
f.idx <- food$sampling==samplings[i]
d.idx <- diet$ym==samplings[i]
n_prey <- length(prey)
diet.i <- rep(0,n_prey)
diet.sum <- sum(diet$B[d.idx])
for(j in 1:n_prey){
diet.i[j] <- diet$B[which(diet$ym==samplings[i] & diet$species==prey[j])]/diet.sum
}
food.i <- log(c(c(food$Bnorm[f.idx])*100,100))
p <- (food.i^k)/sum(food.i^k)
ret <- ret -ddirichlet(x=p,alpha=diet.i*diet$n[d.idx][1])
p_cod[i] <- p[1]
p_flat[i] <- p[2]
p_other[i] <- p[3]
}
#logitPcod <- log(p_cod/(1-p_cod))
#logitPflat <- log(p_flat/(1-p_flat))
#logitPother <- log(p_other/(1-p_other))
ADREPORT(p_cod)
ADREPORT(p_flat)
ADREPORT(p_other)
ret
}
obj <- MakeADFun(f,par,silent=TRUE)
